import pandas as pd
from pynarrator.pluralize import pluralize

def narrate_descriptive(
  df,
  measure = None,
  dimensions = None,
  summarization = 'sum',
  coverage = 0.5,
  coverage_limit = 5,
  narration_depth = 2,
  template_total = 'Total {measure} across all {pluralize(dimension_one)} is {total}.',
  template_average = 'Average {measure} across all {pluralize(dimension_one)} is {total}.',
  template_outlier = 'Outlying {dimension} by {measure} is {outlier_insight}.',
  template_outlier_multiple = 'Outlying {pluralize(dimension)} by {measure} are {outlier_insight}.',
  template_outlier_l2 = 'In {level_l1}, significant {level_l2} by {measure} is {outlier_insight}.',
  template_outlier_l2_multiple = 'In {level_l1}, significant {pluralize(level_l2)} by {measure} are {outlier_insight}.',
  return_data = False,
  simplify = False
  ):
  """
  This function generates a narrative report based on a given data frame and parameters.
  
  Parameters:
  -----------
  df : pandas.DataFrame
      The data frame containing the data to analyze.
  measure : str or None
      The name of the numeric variable to analyze. If None, the first numeric field
      available in the data frame will be used.
  dimensions : list or None
      The names of the categorical variables to include in the analysis. If None, all
      character or factor variables in the data frame will be used.
  summarization : str, {'sum', 'count', 'average'}
      The method to use for summarizing the data. Default is 'sum'.
  coverage : float, optional
      The portion of variability to be covered by the narrative, expressed as a value
      between 0 and 1. Default is 0.5.
  coverage_limit : int, optional
      The maximum number of elements to be narrated. If the number of elements is greater
      than this value, the narrative will be truncated. Default is 5.
  narration_depth : int, {1, 2}
      The depth of the analysis to include in the narrative. 1 for summary and 2 for detailed.
  template_total : str
      The template to use for the narrative report on total volumes.
  template_average : str
      The template to use for the narrative report on average volumes.
  template_outlier : str
      The template to use for the narrative report on single outliers.
  template_outlier_multiple : str
      The template to use for the narrative report on multiple outliers.
  template_outlier_l2 : str
      The template to use for the narrative report on hierarchical single outliers.
  template_outlier_l2_multiple : str
      The template to use for the narrative report on hierarchical multiple outliers.
  return_data : bool, optional
      If True, the function will return a dictionary containing the variables used in the
      function's templates. Default is False.
  simplify : bool, optional
      If True, the function will return a list of the narrative strings instead of a
      dictionary. Default is False.
      
  Returns:
  --------
  narrative : dict or list
      The narrative report generated by the function. If simplify is True, a list of the
      narrative strings will be returned instead of a dictionary.
  """
  # Assert data frame
  if not isinstance(df, pd.DataFrame):
    print('df must be a pandas DataFrame')
    return
  
  if isinstance(measure, type(None)):
    measure = df.\
      select_dtypes(include = 'number').\
      columns[0]
    
  if isinstance(dimensions, type(None)):
    dimensions = df.\
      select_dtypes(include = ['object', 'category']).\
      columns.\
      values.\
      tolist()
      
  dimension_one = dimensions[0]
  
  if summarization == 'sum':
    total_raw = df[measure].sum()
  elif summarization == 'average':
    total_raw = df[measure].mean()
  elif summarization == 'count':
    total_raw = df[measure].count()

  total = total_raw
  
  narrative_total = eval(f"f'{template_total}'")
  
  narrative = {
    f'Total {measure}': narrative_total
  } 
   
  variables = {
      f'Total {measure}': {
        'narrative_total': narrative_total,
        'template_total': template_total,
        'measure': measure,
        'dimension_one': dimension_one,
        'total': total,
        'total_raw': total_raw
    }
  }
  
  
  # Output
  if return_data == True:
    return(variables)
   
  if simplify == True:
    narrative = list(narrative.values())
    
  return(narrative)
# 
# df2 = df.groupby(['Region', 'Product']).agg({'Sales': 'sum'}).reset_index()
# df2.shape
# type(df2)
# sum(df2['Sales'])
# narrate_descriptive(df2)
# 
# df3 = df.groupby(['Region', 'Product']).agg({'Sales': 'sum'})
# df3['Sales'].sum().sum()
# 
# narrate_descriptive(df, measure = 'Sales', dimensions = ['Region', 'Product'], return_data=False,  simplify=True)
# 
# measure = 'Sales'
# dimensions = ['Region', 'Product']
# return_data=False
# simplify=True

