{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pynarrator","text":"<p>Template-based NLG framework for creating text narratives out of data</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install the package from pip:</p> <pre><code>pip3 install pynarrator\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Import the package functions and create a data frame.</p> <pre><code>import os\nfrom pynarrator import narrate_descriptive, read_data, gpt_get_completions, enhance_narrative, translate_narrative, summarize_narrative\n</code></pre> <pre><code>df = read_data()\ndf.head()\n</code></pre> Order ID Date Region Product Store Promotion Price Quantity Sales 0 QR10276 2019-01-30 EMEA Tools Big 1 89.6 28 2007.04 1 QR15245 2020-07-26 ASPAC Tools Big 0 268.5 7 1879.50 2 QR13938 2020-03-05 EMEA Home Big 0 223.3 18 4019.40 3 QR15934 2020-10-08 LATAM Clothing Big 0 210.4 27 5680.80 4 QR10963 2019-04-15 EMEA Tools Big 0 193.1 22 4248.20 <pre><code>narrative = narrate_descriptive(df, measure = 'Sales', dimensions = ['Region', 'Product'], return_data = False, coverage = 0.5)\nprint(narrative)\n</code></pre> <pre><code>{'Total Sales': 'Total Sales across all Regions is 38790478.42.', 'Region by Sales': 'Outlying Region by Sales is NA (18079736.4, 47.0%).', 'Product by Sales': 'Outlying Product by Sales is Food &amp; Beverage (15543469.7, 40.0%).'}\n</code></pre> <pre><code>narrate_descriptive(df, measure = 'Sales', dimensions = ['Region', 'Product'], return_data = False, coverage = 0.5)\n</code></pre> <pre><code>{'Total Sales': 'Total Sales across all Regions is 38790478.42.',\n 'Region by Sales': 'Outlying Region by Sales is NA (18079736.4, 47.0%).',\n 'Product by Sales': 'Outlying Product by Sales is Food &amp; Beverage (15543469.7, 40.0%).'}\n</code></pre> <pre><code>narrate_descriptive(df, measure = 'Sales', dimensions = ['Region', 'Product'], simplify=True, coverage = 0.5)\n</code></pre> <pre><code>['Total Sales across all Regions is 38790478.42.',\n 'Outlying Region by Sales is NA (18079736.4, 47.0%).',\n 'Outlying Product by Sales is Food &amp; Beverage (15543469.7, 40.0%).']\n</code></pre> <pre><code>n = str(narrative)\nf'{narrative}'\n</code></pre> <pre><code>\"{'Total Sales': 'Total Sales across all Regions is 38790478.42.', 'Region by Sales': 'Outlying Region by Sales is NA (18079736.4, 47.0%).', 'Product by Sales': 'Outlying Product by Sales is Food &amp; Beverage (15543469.7, 40.0%).'}\"\n</code></pre> <pre><code>enhance_narrative(narrative)\n</code></pre> <pre><code>\"As a knowledgeable business assistant, I would like to present key business insights for your consideration. The Total Sales figure, which represents the aggregate revenue generated across all operational Regions, stands at a noteworthy 38,790,478.42. \\n\\nFurther, an analysis of sales performance by distinct Regions reveals that the Outlying Region has generated top sales, accounting for 47.0% of the revenue, totaling an impressive 18,079,736.4. \\n\\nIn addition, a product-centric analysis has also been conducted, which underscores the significant contribution of the Food &amp; Beverage segment towards the company's overall sales figures. This product category has emerged as the Outlying Product by Sales, generating a revenue of 15,543,469.7, which accounts for 40.0% of the total sales. \\n\\nI hope that this information helps you in making informed business decisions. Please do not hesitate to reach out in case of any further queries.\"\n</code></pre> <pre><code>prompt = \"Improve the narrative by adding better business language for 'By Region Sales across all Regions is 2.3 M. Outlying Regions by Sales: West (725,457.9, 31.6 %), East (678,781.2, 29.5 %) West by Segment. In West, Sales across all Segment is equal to 725,457.9. In West, significant Segment by Sales: Consumer (362,880.8, 50.0 %) East by Segment. In East, Sales across all Segment is equal to 678,781.2. In East, significant Segment by Sales: Consumer (350,908.2, 51.7 %). By Segment. Sales across all Segment is 2.3 M. Outlying Segment by Sales: Consumer (1.2 M, 50.6 %)'\"\n\noutput = gpt_get_completions(prompt)\nprint(output)\n</code></pre> <pre><code>The latest sales figures reveal that the company generated a revenue of 2.3 million through its operations across all regions. Sales across different regions were as follows: West generated the highest revenue of 725,457.9 (31.6%), while in the East, sales worth 678,781.2 (29.5%) were recorded. In the West region, the Consumer segment proved to be the most significant contributor, generating 50.0% of total sales, with revenue amounting to 362,880.8. Similarly, in the East, the Consumer segment dominated, contributing 51.7% of the total sales value of 350,908.2.\n\nBreaking down the figures by segment, the consumer segment proved to be the most successful for the company, contributing 1.2 million (50.6%) of the total sales. This highlights the importance of investing resources and efforts towards consumer-centric products and services, as they seem to be the primary drivers of revenue growth for the company.\n</code></pre> <pre><code>translate_narrative(output, language=\"Russian\")\n</code></pre> <pre><code>'\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u043c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442, \u0447\u0442\u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0430 \u0434\u043e\u0445\u043e\u0434 \u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u0435 2,3 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 \u0447\u0435\u0440\u0435\u0437 \u0441\u0432\u043e\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u043e \u0432\u0441\u0435\u0445 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445. \u041f\u0440\u043e\u0434\u0430\u0436\u0438 \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445 \u0431\u044b\u043b\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c\u0438: \u0417\u0430\u043f\u0430\u0434 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0434\u043e\u0445\u043e\u0434 \u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u0435 725 457,9 (31,6%), \u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a \u043d\u0430 \u0412\u043e\u0441\u0442\u043e\u043a\u0435 \u0431\u044b\u043b\u0438 \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043d\u0430 \u0441\u0443\u043c\u043c\u0443 678 781,2 (29,5%). \u0412 \u0440\u0435\u0433\u0438\u043e\u043d\u0435 \u0417\u0430\u043f\u0430\u0434\u0430 \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u043c \u0432\u043a\u043b\u0430\u0434\u0447\u0438\u043a\u043e\u043c, \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u044f 50,0% \u043e\u0442 \u043e\u0431\u0449\u0438\u0445 \u043f\u0440\u043e\u0434\u0430\u0436, \u0441 \u043e\u0431\u0449\u0438\u043c \u0434\u043e\u0445\u043e\u0434\u043e\u043c \u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u0435 362 880,8. \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u043d\u0430 \u0432\u043e\u0441\u0442\u043e\u043a\u0435 \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u0434\u043e\u043c\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043b, \u0432\u043d\u043e\u0441\u044f 51,7% \u043e\u0442 \u043e\u0431\u0449\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u0435 350 908,2.\\n\u0420\u0430\u0437\u0431\u0438\u0432\u0430\u044f \u0446\u0438\u0444\u0440\u044b \u043f\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u043c, \u0421\u0435\u0433\u043c\u0435\u043d\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439 \u043e\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u044b\u043c \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0432\u043d\u0435\u0441\u0448\u0438\u043c 1,2 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 (50,6%) \u043e\u0442 \u043e\u0431\u0449\u0435\u0439 \u0432\u044b\u0440\u0443\u0447\u043a\u0438. \u042d\u0442\u043e \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u0435\u0442 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0438 \u0443\u0441\u0438\u043b\u0438\u0439 \u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u0438 \u0443\u0441\u043b\u0443\u0433\u0438, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438, \u043a\u0430\u0436\u0435\u0442\u0441\u044f, \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\u0438 \u0434\u0432\u0438\u0436\u0443\u0449\u0438\u043c\u0438 \u0441\u0438\u043b\u0430\u043c\u0438 \u0440\u043e\u0441\u0442\u0430 \u0434\u043e\u0445\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.'\n</code></pre> <pre><code>summarize_narrative(output)\n</code></pre> <pre><code>'The company generated 2.3 million in revenue across regions. Consumer sales in the West and East regions were dominant, contributing 50% and 51.7% respectively. The consumer segment drove 50.6% of total sales, showing the importance of investing in consumer-centric products and services.'\n</code></pre>"},{"location":"descriptive/","title":"Documentation for <code>narrate_descriptive</code>","text":"<p>This function generates a narrative report based on a given data frame and parameters.</p> pandas.DataFrame <p>The data frame containing the data to analyze.</p> str or None <p>The name of the numeric variable to analyze. If None, the first numeric field available in the data frame will be used.</p> list or None <p>The names of the categorical variables to include in the analysis. If None, all character or factor variables in the data frame will be used.</p> str, {'sum', 'count', 'average'} <p>The method to use for summarizing the data. Default is 'sum'.</p> float, optional <p>The portion of variability to be covered by the narrative, expressed as a value between 0 and 1. Default is 0.5.</p> int, optional <p>The maximum number of elements to be narrated. If the number of elements is greater than this value, the narrative will be truncated. Default is 5.</p> int, {1, 2} <p>The depth of the analysis to include in the narrative. 1 for summary and 2 for detailed.</p> str <p>The template to use for the narrative report on total volumes.</p> str <p>The template to use for the narrative report on average volumes.</p> str <p>The template to use for the narrative report on single outliers.</p> str <p>The template to use for the narrative report on multiple outliers.</p> str <p>The template to use for the narrative report on hierarchical single outliers.</p> str <p>The template to use for the narrative report on hierarchical multiple outliers.</p> bool, optional <p>If True, the function will return a dictionary containing the variables used in the function's templates. Default is False.</p> bool, optional <p>If True, the function will return a list of the narrative strings instead of a dictionary. Default is False.</p> dict or list <p>The narrative report generated by the function. If simplify is True, a list of the narrative strings will be returned instead of a dictionary.</p> Example <p>from pynarrator import *    narrative = narrate_descriptive(df, measure = 'Sales', dimensions = ['Region', 'Product'])</p> Source code in <code>pynarrator/narrate_descriptive.py</code> <pre><code>def narrate_descriptive(\n  df,\n  measure = None,\n  dimensions = None,\n  summarization = 'sum',\n  coverage = 0.5,\n  coverage_limit = 5,\n  narration_depth = 2,\n  template_total = 'Total {measure} across all {pluralize(dimension_one)} is {total}.',\n  template_average = 'Average {measure} across all {pluralize(dimension_one)} is {total}.',\n  template_outlier = 'Outlying {dimension} by {measure} is {outlier_insight}.',\n  template_outlier_multiple = 'Outlying {pluralize(dimension)} by {measure} are {outlier_insight}.',\n  template_outlier_l2 = 'In {level_l1}, significant {level_l2} by {measure} is {outlier_insight}.',\n  template_outlier_l2_multiple = 'In {level_l1}, significant {pluralize(level_l2)} by {measure} are {outlier_insight}.',\n  return_data = False,\n  simplify = False\n  ):\n\"\"\"\n  This function generates a narrative report based on a given data frame and parameters.\n\n  Parameters:\n  -----------\n  df : pandas.DataFrame\n      The data frame containing the data to analyze.\n  measure : str or None\n      The name of the numeric variable to analyze. If None, the first numeric field\n      available in the data frame will be used.\n  dimensions : list or None\n      The names of the categorical variables to include in the analysis. If None, all\n      character or factor variables in the data frame will be used.\n  summarization : str, {'sum', 'count', 'average'}\n      The method to use for summarizing the data. Default is 'sum'.\n  coverage : float, optional\n      The portion of variability to be covered by the narrative, expressed as a value\n      between 0 and 1. Default is 0.5.\n  coverage_limit : int, optional\n      The maximum number of elements to be narrated. If the number of elements is greater\n      than this value, the narrative will be truncated. Default is 5.\n  narration_depth : int, {1, 2}\n      The depth of the analysis to include in the narrative. 1 for summary and 2 for detailed.\n  template_total : str\n      The template to use for the narrative report on total volumes.\n  template_average : str\n      The template to use for the narrative report on average volumes.\n  template_outlier : str\n      The template to use for the narrative report on single outliers.\n  template_outlier_multiple : str\n      The template to use for the narrative report on multiple outliers.\n  template_outlier_l2 : str\n      The template to use for the narrative report on hierarchical single outliers.\n  template_outlier_l2_multiple : str\n      The template to use for the narrative report on hierarchical multiple outliers.\n  return_data : bool, optional\n      If True, the function will return a dictionary containing the variables used in the\n      function's templates. Default is False.\n  simplify : bool, optional\n      If True, the function will return a list of the narrative strings instead of a\n      dictionary. Default is False.\n\n  Returns:\n  --------\n  narrative : dict or list\n      The narrative report generated by the function. If simplify is True, a list of the\n      narrative strings will be returned instead of a dictionary.\n\n  Example:\n    from pynarrator import *\\\n    narrative = narrate_descriptive(df, measure = 'Sales', dimensions = ['Region', 'Product'])\n  \"\"\"\n  # Assert data frame\n  if not isinstance(df, pd.DataFrame):\n    print('df must be a pandas DataFrame')\n    return\n\n  if isinstance(measure, type(None)):\n    measure = df.\\\n      select_dtypes(include = 'number').\\\n      columns[0]\n\n  if isinstance(dimensions, type(None)):\n    dimensions = df.\\\n      select_dtypes(include = ['object', 'category']).\\\n      columns.\\\n      values.\\\n      tolist()\n\n  dimension_one = dimensions[0]\n\n  if summarization == 'sum':\n    total_raw = df[measure].sum()\n  elif summarization == 'average':\n    total_raw = df[measure].mean()\n  elif summarization == 'count':\n    total_raw = df[measure].count()\n\n  total = total_raw\n\n  narrative_total = eval(f\"f'{template_total}'\")\n\n  narrative = {\n    f'Total {measure}': narrative_total\n  } \n\n  variables = {\n      f'Total {measure}': {\n        'narrative_total': narrative_total,\n        'template_total': template_total,\n        'measure': measure,\n        'dimension_one': dimension_one,\n        'total': total,\n        'total_raw': total_raw\n    }\n  }\n\n  # High-Level Narrative\n  for dimension in dimensions:\n\n    output = get_descriptive_outliers(\n      df = df,\n      dimension=dimension,\n      measure=measure,\n      # we need overall total for average only, in other cases it leads to incorrect output\n      total = None if summarization in [\"sum\", \"count\"] else total_raw,\n      summarization = summarization,\n      coverage = coverage,\n      coverage_limit = coverage_limit\n    )\n\n    if output is None:\n        continue\n\n    # Outputting all to the global env\n    n_outliers = output['n_outliers']\n    outlier_levels = output['outlier_levels']\n    outlier_values = output['outlier_values']\n    outlier_values_p = output['outlier_values_p']\n\n    if summarization == 'average':\n      outlier_insight = ', '.join([f\"{outlier_levels} ({outlier_values}, {outlier_values_p} vs average {measure})\" for outlier_levels, outlier_values, outlier_values_p in zip(outlier_levels, outlier_values, outlier_values_p)])\n    else:\n      outlier_insight = ', '.join([f\"{outlier_levels} ({outlier_values}, {outlier_values_p})\" for outlier_levels, outlier_values, outlier_values_p in zip(outlier_levels, outlier_values, outlier_values_p)])\n\n    if n_outliers &gt; 1:\n      template_outlier_final = template_outlier_multiple\n      template_selected = \"multiple\"\n    else:\n      template_outlier_final = template_outlier\n      template_selected = \"single\"\n\n    narrative_outlier_final = {\n       f'{dimension} by {measure}': eval(f\"f'{template_outlier_final}'\")\n       }\n\n    narrative.update(narrative_outlier_final)\n\n    if template_selected == 'single':\n      variables_l1 = { \n         f'{dimension} by {measure}': {\n          'narrative_outlier_final': narrative_outlier_final,        \n          'template_outlier': template_outlier,        \n          'dimension': dimension,        \n          'measure': measure,        \n          'outlier_insight': outlier_insight,        \n          'n_outliers': n_outliers,        \n          'outlier_levels': outlier_levels,        \n          'outlier_values': outlier_values,        \n          'outlier_values_p': outlier_values_p    \n          }\n        }\n\n    if template_selected == 'multiple':\n      variables_l1 = { \n         f'{dimension} by {measure}': {\n          'narrative_outlier_final': narrative_outlier_final,        \n          'template_outlier_multiple': template_outlier_multiple,        \n          'dimension': dimension,        \n          'measure': measure,        \n          'outlier_insight': outlier_insight,        \n          'n_outliers': n_outliers,        \n          'outlier_levels': outlier_levels,        \n          'outlier_values': outlier_values,        \n          'outlier_values_p': outlier_values_p    \n          }\n        }\n\n    variables.update(variables_l1)\n\n  # Output\n  if return_data == True:\n    return(variables)\n\n  if simplify == True:\n    narrative = list(narrative.values())\n\n  return(narrative)\n</code></pre>"}]}