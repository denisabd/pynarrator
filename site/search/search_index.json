{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pynarrator","text":"<p>Template-based NLG framework for creating text narratives out of data</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install the package from pip:</p> <pre><code>pip3 install pynarrator\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Import the package functions and create a data frame.</p> <pre><code>from pynarrator import narrate_descriptive, read_data\n\ndf = read_data()\n\ndf.head()\n</code></pre> <p>Now create descriptive narratives from your data</p> <pre><code>narrate_descriptive(df, measure = 'Sales', dimensions = ['Region', 'Product'])\n</code></pre>"},{"location":"descriptive/","title":"Documentation for <code>narrate_descriptive</code>","text":"<p>This function generates a narrative report based on a given data frame and parameters.</p> pandas.DataFrame <p>The data frame containing the data to analyze.</p> str or None <p>The name of the numeric variable to analyze. If None, the first numeric field available in the data frame will be used.</p> list or None <p>The names of the categorical variables to include in the analysis. If None, all character or factor variables in the data frame will be used.</p> str, {'sum', 'count', 'average'} <p>The method to use for summarizing the data. Default is 'sum'.</p> float, optional <p>The portion of variability to be covered by the narrative, expressed as a value between 0 and 1. Default is 0.5.</p> int, optional <p>The maximum number of elements to be narrated. If the number of elements is greater than this value, the narrative will be truncated. Default is 5.</p> int, {1, 2} <p>The depth of the analysis to include in the narrative. 1 for summary and 2 for detailed.</p> str <p>The template to use for the narrative report on total volumes.</p> str <p>The template to use for the narrative report on average volumes.</p> str <p>The template to use for the narrative report on single outliers.</p> str <p>The template to use for the narrative report on multiple outliers.</p> str <p>The template to use for the narrative report on hierarchical single outliers.</p> str <p>The template to use for the narrative report on hierarchical multiple outliers.</p> bool, optional <p>If True, the function will return a dictionary containing the variables used in the function's templates. Default is False.</p> bool, optional <p>If True, the function will return a list of the narrative strings instead of a dictionary. Default is False.</p> dict or list <p>The narrative report generated by the function. If simplify is True, a list of the narrative strings will be returned instead of a dictionary.</p> Example <p>from pynarrator import *    narrative = narrate_descriptive(df, measure = 'Sales', dimensions = ['Region', 'Product'])</p> Source code in <code>pynarrator/narrate_descriptive.py</code> <pre><code>def narrate_descriptive(\n  df,\n  measure = None,\n  dimensions = None,\n  summarization = 'sum',\n  coverage = 0.5,\n  coverage_limit = 5,\n  narration_depth = 2,\n  template_total = 'Total {measure} across all {pluralize(dimension_one)} is {total}.',\n  template_average = 'Average {measure} across all {pluralize(dimension_one)} is {total}.',\n  template_outlier = 'Outlying {dimension} by {measure} is {outlier_insight}.',\n  template_outlier_multiple = 'Outlying {pluralize(dimension)} by {measure} are {outlier_insight}.',\n  template_outlier_l2 = 'In {level_l1}, significant {level_l2} by {measure} is {outlier_insight}.',\n  template_outlier_l2_multiple = 'In {level_l1}, significant {pluralize(level_l2)} by {measure} are {outlier_insight}.',\n  return_data = False,\n  simplify = False\n  ):\n\"\"\"\n  This function generates a narrative report based on a given data frame and parameters.\n\n  Parameters:\n  -----------\n  df : pandas.DataFrame\n      The data frame containing the data to analyze.\n  measure : str or None\n      The name of the numeric variable to analyze. If None, the first numeric field\n      available in the data frame will be used.\n  dimensions : list or None\n      The names of the categorical variables to include in the analysis. If None, all\n      character or factor variables in the data frame will be used.\n  summarization : str, {'sum', 'count', 'average'}\n      The method to use for summarizing the data. Default is 'sum'.\n  coverage : float, optional\n      The portion of variability to be covered by the narrative, expressed as a value\n      between 0 and 1. Default is 0.5.\n  coverage_limit : int, optional\n      The maximum number of elements to be narrated. If the number of elements is greater\n      than this value, the narrative will be truncated. Default is 5.\n  narration_depth : int, {1, 2}\n      The depth of the analysis to include in the narrative. 1 for summary and 2 for detailed.\n  template_total : str\n      The template to use for the narrative report on total volumes.\n  template_average : str\n      The template to use for the narrative report on average volumes.\n  template_outlier : str\n      The template to use for the narrative report on single outliers.\n  template_outlier_multiple : str\n      The template to use for the narrative report on multiple outliers.\n  template_outlier_l2 : str\n      The template to use for the narrative report on hierarchical single outliers.\n  template_outlier_l2_multiple : str\n      The template to use for the narrative report on hierarchical multiple outliers.\n  return_data : bool, optional\n      If True, the function will return a dictionary containing the variables used in the\n      function's templates. Default is False.\n  simplify : bool, optional\n      If True, the function will return a list of the narrative strings instead of a\n      dictionary. Default is False.\n\n  Returns:\n  --------\n  narrative : dict or list\n      The narrative report generated by the function. If simplify is True, a list of the\n      narrative strings will be returned instead of a dictionary.\n\n  Example:\n    from pynarrator import *\\\n    narrative = narrate_descriptive(df, measure = 'Sales', dimensions = ['Region', 'Product'])\n  \"\"\"\n  # Assert data frame\n  if not isinstance(df, pd.DataFrame):\n    print('df must be a pandas DataFrame')\n    return\n\n  if isinstance(measure, type(None)):\n    measure = df.\\\n      select_dtypes(include = 'number').\\\n      columns[0]\n\n  if isinstance(dimensions, type(None)):\n    dimensions = df.\\\n      select_dtypes(include = ['object', 'category']).\\\n      columns.\\\n      values.\\\n      tolist()\n\n  dimension_one = dimensions[0]\n\n  if summarization == 'sum':\n    total_raw = df[measure].sum()\n  elif summarization == 'average':\n    total_raw = df[measure].mean()\n  elif summarization == 'count':\n    total_raw = df[measure].count()\n\n  total = total_raw\n\n  narrative_total = eval(f\"f'{template_total}'\")\n\n  narrative = {\n    f'Total {measure}': narrative_total\n  } \n\n  variables = {\n      f'Total {measure}': {\n        'narrative_total': narrative_total,\n        'template_total': template_total,\n        'measure': measure,\n        'dimension_one': dimension_one,\n        'total': total,\n        'total_raw': total_raw\n    }\n  }\n\n  # High-Level Narrative\n  for dimension in dimensions:\n\n    output = get_descriptive_outliers(\n      df = df,\n      dimension=dimension,\n      measure=measure,\n      # we need overall total for average only, in other cases it leads to incorrect output\n      total = None if summarization in [\"sum\", \"count\"] else total_raw,\n      summarization = summarization,\n      coverage = coverage,\n      coverage_limit = coverage_limit\n    )\n\n    if output is None:\n        continue\n\n    # Outputting all to the global env\n    n_outliers = output['n_outliers']\n    outlier_levels = output['outlier_levels']\n    outlier_values = output['outlier_values']\n    outlier_values_p = output['outlier_values_p']\n\n    if summarization == 'average':\n      outlier_insight = ', '.join([f\"{outlier_levels} ({outlier_values}, {outlier_values_p} vs average {measure})\" for outlier_levels, outlier_values, outlier_values_p in zip(outlier_levels, outlier_values, outlier_values_p)])\n    else:\n      outlier_insight = ', '.join([f\"{outlier_levels} ({outlier_values}, {outlier_values_p})\" for outlier_levels, outlier_values, outlier_values_p in zip(outlier_levels, outlier_values, outlier_values_p)])\n\n    if n_outliers &gt; 1:\n      template_outlier_final = template_outlier_multiple\n      template_selected = \"multiple\"\n    else:\n      template_outlier_final = template_outlier\n      template_selected = \"single\"\n\n    narrative_outlier_final = {\n       f'{dimension} by {measure}': eval(f\"f'{template_outlier_final}'\")\n       }\n\n    narrative.update(narrative_outlier_final)\n\n    if template_selected == 'single':\n      variables_l1 = { \n         f'{dimension} by {measure}': {\n          'narrative_outlier_final': narrative_outlier_final,        \n          'template_outlier': template_outlier,        \n          'dimension': dimension,        \n          'measure': measure,        \n          'outlier_insight': outlier_insight,        \n          'n_outliers': n_outliers,        \n          'outlier_levels': outlier_levels,        \n          'outlier_values': outlier_values,        \n          'outlier_values_p': outlier_values_p    \n          }\n        }\n\n    if template_selected == 'multiple':\n      variables_l1 = { \n         f'{dimension} by {measure}': {\n          'narrative_outlier_final': narrative_outlier_final,        \n          'template_outlier_multiple': template_outlier_multiple,        \n          'dimension': dimension,        \n          'measure': measure,        \n          'outlier_insight': outlier_insight,        \n          'n_outliers': n_outliers,        \n          'outlier_levels': outlier_levels,        \n          'outlier_values': outlier_values,        \n          'outlier_values_p': outlier_values_p    \n          }\n        }\n\n    variables.update(variables_l1)\n\n  # Output\n  if return_data == True:\n    return(variables)\n\n  if simplify == True:\n    narrative = list(narrative.values())\n\n  return(narrative)\n</code></pre>"}]}